host=x86_64-apple-darwin
ranlib=$(host-ranlib)
build=x86_64-linux-gnu
sdk=/Developer/SDKs/MacOSX10.13.sdk

# How many source files to build in parallel within each package
jobs=-j8

# Source and binary directories
src=/src
prefix=/target
work=$(src)/macosx
stow=$(prefix)/stow

include ../makefile.common

qjson=qjson-0.9.0_1
qjsontgz=$(downloads)/$(qjson).high_sierra.bottle.tar.gz

liblastfm=liblastfm-1.0.9_2
liblastfmtgz=$(liblastfm).high_sierra.bottle.tar.gz

# Useful macros for building packages
pkgconfig=PKG_CONFIG_PATH=$(PKG_CONFIG_PATH):$(prefix)/lib/pkgconfig:/usr/local/Library/Homebrew/pkgconfig
cflags=-m64 -I$(prefix)/include --stdlib=libc++ -Qunused-arguments -isysroot $(sdk)
ldflags=-Wl,-syslibroot,$(sdk) -m64 -L$(prefix)/lib -lc++ -Wl,-headerpad_max_install_names
flagsm64=CC=$(cc) CXX=$(cxx) CFLAGS="$(cflags)" CXXFLAGS="$(cflags)" LDFLAGS="$(ldflags)" LFLAGS="$(ldflags)" OBJCFLAGS="$(cflags)"
path=PATH=$$PATH:$(prefix)/bin
configure=$(pkgconfig) $(flagsm64) $(path) ./configure --prefix=$(prefix) --build=$(build) --host=$(host)
cmake=$(pkgconfig) cmake .. \
	-DCMAKE_TOOLCHAIN_FILE=$(src)/macosx/Toolchain-Darwin.cmake \
	-DCMAKE_OSX_ARCHITECTURES=x86_64 \
	-DCMAKE_INSTALL_PREFIX=$(prefix) \
	-DQT_HEADERS_DIR=$(prefix)/include/ \
	-DQT_LIBRARY_DIR=$(prefix)/lib \
	-DQT_BINARY_DIR=$(prefix)/bin \
	-DQT_MKSPECS_DIR=$(prefix)/mkspecs \
	-DQT_USE_FRAMEWORKS=ON \
	-DCMAKE_C_FLAGS="$(cflags)" \
	-DCMAKE_CXX_FLAGS="$(cflags)" \
	-DCMAKE_EXE_LINKER_FLAGS="$(ldflags)"
make=$(path) make $(jobs)
slowmake=$(path) make
extractpkg=tar -xf $(1)
buildpkg=(cd $(1) && $(configure) && $(make))
buildpkgcmake=(cd $(1) && mkdir build ; cd build && $(cmake) && $(make))
installpkg=rm -rf $(stow)/$(1) && \
	cd $(1) && \
	make install DESTDIR=$(stow)/$(1) && \
	mv -fv $(stow)/$(1)$(prefix)/* $(stow)/$(1)/ && \
	rm -fv $(stow)/$(1)/share/info/dir ; \
	rm -fv $(stow)/$(1)/lib/charset.alias ; \
	cd $(stow) && \
	stow -R $(1) && \
	touch $(work)/$@
installpkgcmake=rm -rf $(stow)/$(1) && \
	cd $(1)/build && \
	make install DESTDIR=$(stow)/$(1) && \
	mv -fv $(stow)/$(1)$(prefix)/* $(stow)/$(1)/ && \
	rm -fv $(stow)/$(1)/share/info/dir ; \
	cd $(stow) && \
	stow -R $(1) && \
	touch $(work)/$@

extractandbuild=$(call extractpkg,$(1)) && $(call buildpkg,$(2)) && $(call installpkg,$(2))
extractandbuildcmake=$(call extractpkg,$(1)) && $(call buildpkgcmake,$(2)) && $(call installpkgcmake,$(2))


# Top-level targets
clementine-build-deps: boost liblastfm taglib \
                       libgpod gstreamer qjson chromaprint \
                       protobuf spotify fftw sparsehash qt5 glew
clementine-gst-plugins: gst-plugins-base gst-plugins-good gst-plugins-bad \
                        gst-plugins-ugly gst-libav
clementine-deps: clementine-build-deps clementine-gst-plugins

# The actual commands for compiling each package follow

.done-sqlite:
	$(call extractandbuild,$(sqlitetgz),$(sqlite))

.done-gettext:
	$(call extractpkg,$(gettexttgz))
	cd $(gettext) && patch -p0 < ../patches/gettext-02-examples.patch
	cd $(gettext) && $(configure) --without-git
	$(call buildpkg,$(gettext))
	$(call installpkg,$(gettext))

.done-glib: .done-gettext  .done-ffi
	$(call extractpkg,$(glibtgz))
	cd $(glib) && $(configure) --with-libiconv=native --cache-file=../glib.cache
	cd $(glib) && $(make)
	rm -fv
	$(call installpkg,$(glib))

.done-ffi:
	$(call extractandbuild,$(ffitgz),$(ffi))

.done-fftw:
	$(call extractpkg,$(fftwtgz))
	cd $(fftw) && $(configure) \
		--with-our-malloc16 --with-windows-f77-mangling --enable-shared \
		--disable-static --enable-threads --with-combined-threads \
		--enable-portable-binary --enable-sse2
	cd $(fftw) && $(make)
	$(call installpkg,$(fftw))

.done-libplist: .done-glib
	$(call extractpkg,$(plisttgz))
	cd $(plist) && patch -p0 < ../patches/libplist-02-iterator.patch
	-mkdir $(plist)/build
	cd $(plist)/build && $(cmake) -DENABLE_CYTHON=OFF -DENABLE_SWIG=OFF
	cd $(plist)/build && $(slowmake)
	$(call installpkgcmake,$(plist))

.done-libgpod: .done-sqlite .done-libplist
	$(call extractandbuildcmake,$(gpodtgz),$(gpod))

.done-gstreamer: .done-glib .done-orc .done-gettext
	$(call extractpkg,$(gsttgz))
	cd $(gst) && $(configure) --disable-examples --disable-tests
	cd $(gst) && $(make)
	$(call installpkg,$(gst))

.done-gst-plugins-base: .done-gstreamer .done-ogg .done-vorbis .done-opus
	$(call extractpkg,$(gstbasetgz))
	cd $(gstbase) && $(configure) --disable-examples --disable-x --disable-xvideo --disable-xshm --disable-theora
	cd $(gstbase) && $(make)
	$(call installpkg,$(gstbase))

.done-orc:
	$(call extractandbuild,$(orctgz),$(orc))

.done-ogg:
	$(call extractandbuild,$(oggtgz),$(ogg))

.done-vorbis: .done-ogg
	$(call extractandbuild,$(vorbistgz),$(vorbis))

.done-gst-plugins-good: .done-gstreamer .done-gst-plugins-base .done-flac .done-wavpack .done-libsoup .done-speex .done-taglib
	$(call extractpkg,$(gstgoodtgz))
	cd $(gstgood) && patch -p1 < ../patches/gst-plugins-good-01-equalizer-writeable-buffers.patch
	cd $(gstgood) && TAGLIB_LIBS="-ltag -lz -L/target/lib" SOUP_CFLAGS=-I$(prefix)/include/libsoup-2.4 $(configure) --disable-shout2 --disable-examples --disable-x --disable-deinterlace --disable-osx_video --disable-aalib --disable-libdv --disable-libpng --disable-cairo --disable-esd --disable-libcaca
	cd $(gstgood) && $(make)
	$(call installpkg,$(gstgood))

.done-flac:
	$(call extractpkg,$(flactgz))
	cd $(flac) && $(configure) --disable-xmms-plugin --disable-asm-optimizations
	cd $(flac) && $(make)
	$(call installpkg,$(flac))

.done-speex: .done-ogg
	$(call extractandbuild,$(speextgz),$(speex))

.done-gst-plugins-ugly: .done-gstreamer .done-gst-plugins-base .done-oil .done-mad .done-lame .done-cdio
	$(call extractpkg,$(gstuglytgz))
	cd $(gstugly) && $(configure) \
					--disable-amrnb \
					--disable-amrwb \
					--disable-examples \
					--disable-mpeg2dec \
					--disable-x264 \
					--enable-mad
	cd $(gstugly) && $(make)
	$(call installpkg,$(gstugly))

.done-oil: .done-glib
	$(call extractpkg,$(oiltgz))
	cd $(oil) && $(pkgconfig) $(flagsm64) $(path) CFLAGS="$(cflags) -fheinous-gnu-extensions" ./configure --prefix=$(prefix) --build=$(build) --host=$(host) --cache-file=../oil.cache
	cd $(oil) && $(make)
	$(call installpkg,$(oil))

.done-id3tag:
	$(call extractandbuild,$(id3tagtgz),$(id3tag))

.done-mad: .done-id3tag
	$(call extractandbuild,$(madtgz),$(mad))

.done-lame:
	$(call extractandbuild,$(lametgz),$(lame))

.done-gst-plugins-bad: .done-gstreamer .done-gst-plugins-base .done-faad .done-libmms .done-oil .done-libquicktime .done-libmpcdec
	$(call extractpkg,$(gstbadtgz))
	cd $(gstbad) && LIBXML2_CFLAGS="-I$(sdk)/usr/include/libxml2" $(configure) \
				--disable-acm \
				--disable-apple_media \
				--disable-curl \
				--disable-dtls \
				--disable-examples \
				--disable-gl \
				--disable-modplug \
				--disable-ofa \
				--disable-opengl \
				--disable-rtmp \
				--disable-zbar
	cd $(gstbad) && $(make)
	$(call installpkg,$(gstbad))

.done-gst-libav: .done-gstreamer .done-gst-plugins-base
	$(call extractandbuild,$(gstlibavtgz),$(gstlibav))

.done-faad:
	$(call extractandbuild,$(faadtgz),$(faad))

.done-libmms: .done-glib  .done-gettext
	$(call extractandbuild,$(mmstgz),$(mms))

.done-libquicktime:
	$(call extractpkg,$(quicktimetgz))
	cd $(quicktime) && $(configure) --without-doxygen --without-ffmpeg --without-lame --without-alsa --without-gtk --without-opengl
	cd $(quicktime) && $(make)
	$(call installpkg,$(quicktime))

.done-usb:
	$(call extractandbuild,$(usbtgz),$(usb))

.done-gcrypt: .done-libgpgerror  .done-gettext
	$(call extractpkg,$(gcrypttgz))
	cd $(gcrypt) && $(configure) --with-gpg-error-prefix=$(prefix) --disable-asm
	cd $(gcrypt) && $(make)
	$(call installpkg,$(gcrypt))

.done-taglib:
	$(call extractpkg,$(taglibtgz))
	-mkdir $(taglib)/build

	cd $(taglib)/build && $(cmake) -DWITH_ASF=ON -DWITH_MP4=ON
	cd $(taglib)/build && $(make)
	$(call installpkgcmake,$(taglib))

.done-boost:
	tar -xf $(boosttgz) -C $(stow)
	cd $(stow) && stow -R $(boost)
	touch $@

.done-protobuf:
	$(call extractpkg,$(protobuftgz))
	cd $(protobuf) && $(configure) --with-protoc=/usr/bin/protoc
	cd $(protobuf) && $(make)
	$(call installpkg,$(protobuf))

.done-spotify:
	unzip -o $(spotifymactgz) -d $(stow)
	rm -rf $(stow)/$(spotifymac)/doc
	rm -rf $(stow)/$(spotifymac)/ChangeLog
	rm -rf $(stow)/$(spotifymac)/LICENSE
	rm -rf $(stow)/$(spotifymac)/README
	rm -rf $(stow)/$(spotifymac)/share
	cd $(stow) && stow $(spotifymac)
	touch $@

.done-libmtp: .done-usb
	$(call extractpkg,$(mtptgz))
	cd $(mtp) && $(configure) --disable-mtpz
	cd $(mtp) && $(make)
	$(call installpkg,$(mtp))

.done-libmpcdec:
	$(call extractpkg,$(mpcdectgz))
	cd $(mpcdec) && $(configure) --cache-file=../mpcdec.cache
	cd $(mpcdec) && $(make)
	$(call installpkg,$(mpcdec))

.done-wavpack:
	$(call extractandbuild,$(wavpacktgz),$(wavpack))

.done-gmp:
	$(call extractandbuild,$(gmptgz),$(gmp))

.done-nettle: .done-gmp
	$(call extractandbuild,$(nettletgz),$(nettle))

.done-gnutls: .done-gcrypt .done-libtasn1 .done-nettle .done-p11kit
	$(call extractpkg,$(gnutlstgz))
	cd $(gnutls) && $(configure) --with-libgcrypt --disable-cxx
	cd $(gnutls) && $(make)
#	sed -e 's/ *, *zlib//' -i "" $(gnutls)/lib/gnutls.pc
	$(call installpkg,$(gnutls))

.done-libtasn1:
	$(call extractpkg,$(tasn1tgz))
	cd $(tasn1) && $(configure) --disable-gcc-warnings
	cd $(tasn1) && $(make)
	$(call installpkg,$(tasn1))

.done-libgpgerror:
	$(call extractandbuild,$(gpgerrortgz),$(gpgerror))

.done-libproxy:
	$(call extractpkg,$(proxytgz))
	patch -d $(proxy) -p0 < patches/libproxy-03-build.patch
	patch -d $(proxy) -p0 < patches/libproxy-04-darwin.patch
	-mkdir $(proxy)/build
	cd $(proxy)/build && $(cmake) -DWITH_PYTHON=OFF -DWITH_PERL=OFF -DBUILD_TESTING=OFF
	cd $(proxy)/build && $(make)
	$(call installpkgcmake,$(proxy))


.done-glibnetworking: .done-glib .done-gnutls .done-libproxy
	$(call extractpkg,$(glibnetworkingtgz))
	cd $(glibnetworking) && $(configure) --without-ca-certificates
	cd $(glibnetworking) && $(make)
	$(call installpkg,$(glibnetworking))

.done-libsoup: .done-glib .done-gnutls .done-glibnetworking  .done-gettext .done-sqlite
	$(call extractpkg,$(souptgz))
	cd $(soup) && patch -p0 < ../patches/libsoup-01-sym.patch
	cd $(soup) && XML_CFLAGS="-I$(sdk)/usr/include/libxml2" $(configure) --without-gnome
	cd $(soup) && $(make)
	$(call installpkg,$(soup))

.done-glew:
	$(call extractpkg,$(glewtgz))
	cd $(glew) && $(make) \
			GLEW_DEST=$(stow)/$(glew) \
			SYSTEM=darwin \
			CC=$(host)-gcc \
			CFLAGS="$(cflags) -I./include" \
			LD=$(host)-gcc \
			LDFLAGS.SO="-Wl,-syslibroot,$(sdk) -dynamiclib" \
			STRIP=x86_64-apple-darwin-strip
	cd $(glew) && make \
			GLEW_DEST=$(stow)/$(glew) \
			SYSTEM=darwin \
			CC=$(host)-gcc \
			CFLAGS="$(cflags) -I./include" \
			LD=$(host)-gcc \
			LDFLAGS.SO="-Wl,-syslibroot,$(sdk) -dynamiclib" \
			STRIP=x86_64-apple-darwin-strip \
			INSTALL="install --strip-program=x86_64-apple-darwin-strip" \
			install
	cd $(stow) && stow -R $(glew)
	touch $(work)/$@

.done-cdio:
	$(call extractpkg,$(cdiotgz))
	cd $(cdio) && $(configure)
	cd $(cdio) && $(make)
	$(call installpkg,$(cdio))

.done-sparsehash:
	$(call extractandbuild,$(sparsehashtgz),$(sparsehash))

.done-qt5:
	-mkdir $(stow)/$(qt5)
	tar -xf $(qt5tgz) -C $(stow)/$(qt5) --strip-components=2 --exclude=INSTALL_RECEIPT.json

	rm $(stow)/$(qt5)/bin/lconvert
	rm $(stow)/$(qt5)/bin/moc
	rm $(stow)/$(qt5)/bin/rcc
	rm $(stow)/$(qt5)/bin/uic

	ln -s /usr/bin/lconvert $(stow)/$(qt5)/bin/lconvert
	ln -s /usr/bin/moc $(stow)/$(qt5)/bin/moc
	ln -s /usr/bin/rcc $(stow)/$(qt5)/bin/rcc
	ln -s /usr/bin/uic $(stow)/$(qt5)/bin/uic

	cd $(stow) && stow -R $(qt5)
	touch $(work)/$@

.done-qjson: .done-qt5
	-mkdir $(stow)/$(qjson)
	tar -xf $(qjsontgz) -C $(stow)/$(qjson) --strip-components=2 --exclude=INSTALL_RECEIPT.json
	cd $(stow) && stow -R $(qjson)
	touch $(work)/$@

.done-liblastfm: .done-qt5
	-mkdir $(stow)/$(liblastfm)
	tar -xf $(liblastfmtgz) -C $(stow)/$(liblastfm) --strip-components=2 --exclude=INSTALL_RECEIPT.json
	cd $(stow) && stow -R $(liblastfm)
	touch $(work)/$@

.done-opus:
	$(call extractandbuild,$(opustgz),$(opus))

.done-chromaprint: .done-fftw
	$(call extractpkg,$(chromaprinttgz))
	patch -d $(chromaprint) -p0 < patches/chromaprint-01-pkgconfig.patch
	$(call buildpkgcmake,$(chromaprint))
	$(call installpkgcmake,$(chromaprint))

.done-p11kit: .done-libtasn1 .done-ffi
	$(call extractandbuild,$(p11kittgz),$(p11kit))
