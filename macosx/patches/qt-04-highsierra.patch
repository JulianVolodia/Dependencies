--- src/gui/kernel/qcursor_mac.mm.orig	2018-09-26 14:52:22.241824100 +0100
+++ src/gui/kernel/qcursor_mac.mm	2018-09-26 14:54:43.039785800 +0100
@@ -319,7 +319,7 @@
     pos.x = x;
     pos.y = y;
 
-    CGEventRef e = CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0);
+    CGEventRef e = CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft);
     CGEventPost(kCGHIDEventTap, e);
     CFRelease(e);
 #else
@@ -367,7 +367,7 @@
     type = QCursorData::TYPE_ImageCursor;
     curs.cp.my_cursor = true;
     QPixmap bmCopy = QPixmap::fromImage(finalCursor);
-    NSPoint hotSpot = { hx, hy };
+    NSPoint hotSpot = { static_cast<CGFloat>(hx), static_cast<CGFloat>(hy) };
     nsimage = static_cast<NSImage*>(qt_mac_create_nsimage(bmCopy));
     curs.cp.nscursor = [[NSCursor alloc] initWithImage:nsimage hotSpot: hotSpot];
     [nsimage release];
@@ -377,7 +377,7 @@
 {
     type = QCursorData::TYPE_ImageCursor;
     curs.cp.my_cursor = true;
-    NSPoint hotSpot = { hx, hy };
+    NSPoint hotSpot = { static_cast<CGFloat>(hx), static_cast<CGFloat>(hy) };
     NSImage *nsimage;
     nsimage = static_cast<NSImage *>(qt_mac_create_nsimage(pixmap));
     curs.cp.nscursor = [[NSCursor alloc] initWithImage:nsimage hotSpot: hotSpot];
--- src/gui/kernel/qwidget_mac.mm.orig	2018-09-26 15:04:03.514803500 +0100
+++ src/gui/kernel/qwidget_mac.mm	2018-09-26 15:04:13.392802600 +0100
@@ -3620,7 +3620,7 @@
 #else
             // Only needed if it exists from 10.7 or later
             if ((q->windowType() == Qt::Tool) && [window respondsToSelector: @selector(setAnimationBehavior:)])
-                [window setAnimationBehavior: 2]; // NSWindowAnimationBehaviorNone == 2
+                [window setAnimationBehavior: NSWindowAnimationBehaviorNone];
 
             [window orderOut:window];
             // Unfortunately it is not as easy as just hiding the window, we need
--- src/gui/kernel/qcocoaview_mac.mm.orig	2018-09-26 15:13:29.658425500 +0100
+++ src/gui/kernel/qcocoaview_mac.mm	2018-09-26 15:14:52.159424300 +0100
@@ -1352,7 +1352,10 @@
     // Save supported actions:
     [theView setSupportedActions: qt_mac_mapDropActions(dragPrivate()->possible_actions)];
     QPoint pointInView = [theView qt_qwidget]->mapFromGlobal(dndParams->globalPoint);
-    NSPoint imageLoc = {pointInView.x() - hotspot.x(), pointInView.y() + pix.height() - hotspot.y()};
+    NSPoint imageLoc = {
+        static_cast<CGFloat>(pointInView.x() - hotspot.x()),
+        static_cast<CGFloat>(pointInView.y() + pix.height() - hotspot.y())
+    };
     NSSize mouseOffset = {0.0, 0.0};
     NSPasteboard *pboard = [NSPasteboard pasteboardWithName:NSDragPboard];
     dragPrivate()->executed_action = Qt::ActionMask;
--- src/gui/kernel/qcocoamenuloader_mac.mm.orig	2018-09-26 15:16:06.440672200 +0100
+++ src/gui/kernel/qcocoamenuloader_mac.mm	2018-09-26 15:16:38.223677000 +0100
@@ -125,7 +125,7 @@
 - (void)removeActionsFromAppMenu
 {
     for (NSMenuItem *item in [appMenu itemArray])
-        [item setTag:nil];
+        [item setTag:0];
 }
 
 - (void)dealloc
--- src/gui/text/qfontengine_coretext.mm.orig	2018-09-26 15:25:58.802138700 +0100
+++ src/gui/text/qfontengine_coretext.mm	2018-09-26 15:26:10.719137600 +0100
@@ -863,7 +863,7 @@
 
 QFixed QCoreTextFontEngine::emSquareSize() const
 {
-    return QFixed::QFixed(int(CTFontGetUnitsPerEm(ctfont)));
+    return QFixed(int(CTFontGetUnitsPerEm(ctfont)));
 }
 
 QFontEngine *QCoreTextFontEngine::cloneWithSize(qreal pixelSize) const
--- src/gui/kernel/qt_cocoa_helpers_mac.mm.orig	2018-09-26 15:41:17.631386100 +0100
+++ src/gui/kernel/qt_cocoa_helpers_mac.mm	2018-09-26 15:42:02.168387900 +0100
@@ -346,15 +346,8 @@
 #endif
 }
 
-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)
+void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)
 {
-    // Verbatim copy if HIViewDrawCGImage (as shown on Carbon-Dev)
-    OSStatus err = noErr;
-
-    require_action(inContext != NULL, InvalidContext, err = paramErr);
-    require_action(inBounds != NULL, InvalidBounds, err = paramErr);
-    require_action(inImage != NULL, InvalidImage, err = paramErr);
-
     CGContextSaveGState( inContext );
     CGContextTranslateCTM (inContext, 0, inBounds->origin.y + CGRectGetMaxY(*inBounds));
     CGContextScaleCTM(inContext, 1, -1);
@@ -362,10 +355,6 @@
     CGContextDrawImage(inContext, *inBounds, inImage);
 
     CGContextRestoreGState(inContext);
-InvalidImage:
-InvalidBounds:
-InvalidContext:
-	return err;
 }
 
 bool qt_mac_checkForNativeSizeGrip(const QWidget *widget)
--- src/gui/kernel/qt_cocoa_helpers_mac_p.h.orig	2018-09-26 15:56:39.488020400 +0100
+++ src/gui/kernel/qt_cocoa_helpers_mac_p.h	2018-09-26 15:56:44.887015600 +0100
@@ -141,7 +141,7 @@
 void qt_mac_showBaseLineSeparator(void * /*OSWindowRef */window, bool show);
 void * /*NSImage */qt_mac_create_nsimage(const QPixmap &pm);
 void qt_mac_update_mouseTracking(QWidget *widget);
-OSStatus qt_mac_drawCGImage(CGContextRef cg, const CGRect *inbounds, CGImageRef);
+void qt_mac_drawCGImage(CGContextRef cg, const CGRect *inbounds, CGImageRef);
 bool qt_mac_checkForNativeSizeGrip(const QWidget *widget);
 void qt_dispatchTabletProximityEvent(void * /*NSEvent * */ tabletEvent);
 #ifdef QT_MAC_USE_COCOA
--- src/gui/widgets/qmenu_mac.mm.orig	2018-09-26 16:04:17.945076500 +0100
+++ src/gui/widgets/qmenu_mac.mm	2018-09-26 16:04:31.583383700 +0100
@@ -769,7 +769,7 @@
                    && menuItem != [getMenuLoader() quitMenuItem]) {
             [menuItem setHidden:YES];
         }
-        [menuItem setTag:nil];
+        [menuItem setTag:0];
     }
     [menuItem release];
 #endif
--- src/gui/painting/qpaintengine_mac.cpp	2015-05-07 07:14:43.000000000 -0700
+++ src/gui/painting/qpaintengine_mac.cpp	2015-07-06 18:07:52.000000000 -0700
@@ -340,13 +340,7 @@
     }
 
     // Get the color space from the display profile.
-    CGColorSpaceRef colorSpace = 0;
-    CMProfileRef displayProfile = 0;
-    CMError err = CMGetProfileByAVID((CMDisplayIDType)displayID, &displayProfile);
-    if (err == noErr) {
-        colorSpace = CGColorSpaceCreateWithPlatformColorSpace(displayProfile);
-        CMCloseProfile(displayProfile);
-    }
+    CGColorSpaceRef colorSpace = CGDisplayCopyColorSpace(displayID);
 
     // Fallback: use generic DeviceRGB
     if (colorSpace == 0)
--- src/plugins/accessible/widgets/itemviews.cpp.orig	2018-09-26 16:38:55.249877000 +0100
+++ src/plugins/accessible/widgets/itemviews.cpp	2018-09-26 16:43:21.431939200 +0100
@@ -393,7 +393,7 @@
     QModelIndex index = view()->model()->index(0, column, view()->rootIndex());
     if (!index.isValid() || view()->selectionMode() & QAbstractItemView::NoSelection)
         return false;
-    view()->selectionModel()->select(index, QItemSelectionModel::Columns & QItemSelectionModel::Deselect);
+    view()->selectionModel()->select(index, QFlags<QItemSelectionModel::SelectionFlag>(QItemSelectionModel::Columns & QItemSelectionModel::Deselect));
     return true;
 }
 
